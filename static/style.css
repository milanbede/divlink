body {
    background-color: #000000; /* Black background */
    color: #00ff00; /* Bright green text */
    font-family: 'Lucida Console', Monaco, 'Courier New', monospace; /* Classic terminal font */
    margin: 0;
    padding: 20px;
    font-size: 16px;
    line-height: 1.5;
}

#terminal {
    background-color: #050505; /* Very dark grey, almost black */
    border: 1px solid #00ff00; /* Green border */
    padding: 15px;
    height: calc(100vh - 70px); /* Full viewport height minus body padding and some margin */
    overflow-y: auto;
    box-shadow: 0 0 15px #00ff00, inset 0 0 10px rgba(0, 128, 0, 0.7); /* Green glow, inner green shadow for depth */
    position: relative; /* For scanlines pseudo-element */
}

/* Scanline effect */
#terminal::after {
    content: '';
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: repeating-linear-gradient(
        0deg,
        rgba(0, 255, 0, 0.05), /* Fainter green lines */
        rgba(0, 255, 0, 0.05) 1px,
        transparent 1px,
        transparent 3px /* Adjust line thickness and spacing */
    );
    pointer-events: none; /* So it doesn't interfere with clicks */
    z-index: 1; /* Behind content */
}

#output div {
    margin-bottom: 5px;
    word-wrap: break-word;
    text-shadow: 0 0 4px #00ff00; /* Green glow for text */
    position: relative; /* To ensure it's above scanlines */
    z-index: 2;
}

.prompt-line {
    display: flex;
    align-items: center;
    position: relative; /* To ensure it's above scanlines */
    z-index: 2;
}

.prompt, .prompt-echo {
    color: #00ff00; /* Green prompt */
    text-shadow: 0 0 4px #00ff00; /* Matching glow for prompt */
    margin-right: 8px;
    user-select: none;
}

#commandInput {
    background-color: transparent;
    border: none;
    color: #00ff00; /* Green input text */
    font-family: inherit;
    font-size: inherit;
    outline: none;
    flex-grow: 1;
    padding: 0;
    text-shadow: 0 0 4px #00ff00; /* Add green glow to input text */
    caret-color: transparent; /* Hide the default browser caret */
}

#customCursor {
    position: absolute;
    display: inline-block;
    width: 1ch; /* Width of one character */
    background-color: #00ff00; /* Matrix green */
    pointer-events: none; /* So it doesn't interfere with input field clicks */
    z-index: 3; /* Above other prompt-line content if needed */
    visibility: hidden; /* Initially hidden, JS will manage visibility */
    animation: blinkCustomCursor 1s step-end infinite;
}

@keyframes blinkCustomCursor {
    0%, 100% { background-color: #00ff00; } /* Visible */
    50% { background-color: transparent; }    /* Invisible */
}

/* Old blinkCursor keyframes are no longer needed */

#commandInput:focus {
    /* The custom cursor now serves as the focus indicator.
       If you want an additional outline on focus, you can add it here.
       e.g., outline: 1px dashed rgba(0, 255, 0, 0.5); */
}

#textMeasurer {
    position: absolute;
    visibility: hidden;
    height: auto;
    width: auto;
    white-space: pre; /* Crucial for measuring spaces like in an input */
    /* Styles like font, letter-spacing, etc., will be copied dynamically via JS */
}

.llm-response-text {
    white-space: pre-line; /* Respects newline characters from the text content */
}

.divine-name {
    /* Stronger glow than default text-shadow */
    text-shadow: 0 0 7px #88ff88, 0 0 14px #00ff00;
    /* Optionally, make it slightly bolder or a different shade if desired */
    /* font-weight: bold; */
}

.echoed-command-line {
    display: flex;
    align-items: center;
    /* Inherits text-shadow, font, color from parent #output div or body */
}

.echoed-command-text {
    padding: 0; /* Match #commandInput's padding */
    /* font-family, font-size, color, text-shadow are inherited */
    white-space: pre-wrap; /* Preserve spaces and wrap text like an input might appear to */
    word-wrap: break-word; /* Ensure long words break if necessary */
}
